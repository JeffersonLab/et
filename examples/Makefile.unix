#
# ET examples unix makefile
#

LIBNAM   = libet
LIB_USER = $(LIBNAM)_user.so

# for all POSIX systems _REENTRANT makes libc functions reentrant
AC_FLAGS = -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS

# Linux
ifeq ($(OSNAME),Linux)
CC = gcc
CFLAGS   = -O3 -fPIC -I../src -I$(INC_DIR) $(AC_FLAGS)
LIBS     = -lieee -lrt -lpthread -lm -lnsl -lresolv -ldl
SHLIB_LD = gcc -shared

# if 32 bit
ifneq ($(ET_BIT_ARCH), 64)
CFLAGS   = -m32 -O3 -fpic -I../src -I$(INC_DIR) $(AC_FLAGS)
SHLIB_LD = gcc -m32 -shared
endif

endif

# Solaris
ifeq ($(OSNAME),SunOS)

CC   = cc
LIBS = -lm -lposix4 -lnsl -lresolv -ldl

# if 64 bit
ifeq ($(ET_BIT_ARCH), 64)

# no static linking on 64 bit solaris
LIB_STATIC =

# if SPARC processor
ifeq ($(PLATFORM), sun4u)
CFLAGS   = -mt -xO5 -xarch=native64 -xcode=pic32 -I../src -I$(INC_DIR) $(AC_FLAGS)
SHLIB_LD = ld -G -L /lib/64
# else if AMD processor
else
# put -fast flag to left of -xarch=amd64 !!!
CFLAGS   = -mt -xO5 -xarch=amd64 -KPIC -I../src -I$(INC_DIR) $(AC_FLAGS)
# for some reason we must handle ucb lib explicitly
SHLIB_LD = ld -G -L /lib/64 -L /usr/ucblib/amd64
endif

# else if 32 bit
else
CFLAGS   = -mt -xO5 -KPIC -I../src -I$(INC_DIR) $(AC_FLAGS)
SHLIB_LD = ld -G
endif

endif

# MAC OS
ifeq ($(OSNAME),Darwin)
CFLAGS   = -O3 -fPIC -I../src -I$(INC_DIR) $(AC_FLAGS) 
SHLIB_LD = ld -dylib /usr/lib/dylib1.o -lpthread -ldl -L$(LIB_DIR) -let /usr/lib/gcc/darwin/3.3/libgcc.a 
LIBS     = -ldl /usr/lib/gcc/darwin/3.3/libgcc.a 
endif


PROGS = et_start \
	et_client \
	et_client_simple \
	et_producer1 \
	et_producer2 \
	et_netclient \
	et_2_et


all: copyFiles $(PROGS) $(LIB_USER) saveFiles

copyFiles:
	-rm -f *.o *.so *.a $(PROGS)
	-cp -p ./.$(OSNAME)/$(PLATFORM)/$(ET_BIT_ARCH)/* .;

saveFiles:
	-cp -p *.o $(PROGS) $(LIB_USER) ./.$(OSNAME)/$(PLATFORM)/$(ET_BIT_ARCH)/.;
	-rm -f *.o

install: all install-lib install-bin

install-lib: $(LIB_USER)
	@echo "Installing $(LIB_USER) library in $(LIB_DIR)"
	-cp -p $(LIB_USER) $(LIB_DIR)/.;

install-bin: $(PROGS)
	@echo "Installing executables in $(BIN_DIR)"
	@for i in $(PROGS); do \
	   echo "  installing $$i"; \
	   cp $$i $(BIN_DIR)/$$i; \
           done;

$(PROGS) : % : %.c  ../src/et.h
	$(CC) -o $@ $(CFLAGS) $< -L../src -let $(LIBS)

# example of user's event selection function in shared lib
$(LIB_USER): et_userfunction.o
	$(SHLIB_LD) -o $(LIB_USER) et_userfunction.o 


clean: 
	-rm -f core *~ *.o *.so *.a $(PROGS)
	-rm -f ./.$(OSNAME)/$(PLATFORM)/$(ET_BIT_ARCH)/*

.c:
	$(CC) -o $* $(CFLAGS) $< -L../src -L$(LIB_DIR) -L/lib64/tls -L/usr/ucblib/amd64 -let $(LIBS)
.c.o:
	$(CC) -c $(CFLAGS) $<
