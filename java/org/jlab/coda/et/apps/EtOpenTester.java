/*----------------------------------------------------------------------------*
 *  Copyright (c) 2001        Southeastern Universities Research Association, *
 *                            Thomas Jefferson National Accelerator Facility  *
 *                                                                            *
 *    This software was developed under a United States Government license    *
 *    described in the NOTICE file included as part of this distribution.     *
 *                                                                            *
 *    Author:  Carl Timmer                                                    *
 *             timmer@jlab.org                   Jefferson Lab, MS-12H        *
 *             Phone: (757) 269-5130             12000 Jefferson Ave.         *
 *             Fax:   (757) 269-5800             Newport News, VA 23606       *
 *                                                                            *
 *----------------------------------------------------------------------------*/

package org.jlab.coda.et.apps;

import org.jlab.coda.et.EtConstants;
import org.jlab.coda.et.EtSystem;
import org.jlab.coda.et.EtSystemOpenConfig;
import org.jlab.coda.et.data.AllData;
import org.jlab.coda.et.exception.EtException;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;

/**
 * This class implements a test to open and close an ET system connection
 * in order to try and force failure.
 *
 * @author Carl Timmer
 */

public class EtOpenTester {

  static int  period = 1; // seconds
  static long prevGcOut;

  public EtOpenTester() {
  }
  
  
  private static void usage() {
    System.out.println("\nUsage: java EtOpenTester -f <ET name> [-h] [-host <ET host>]\n" +
                       "                          [-p <ET server port>] [-u <mcast port>]\n\n" +
	                   "       -f     ET system's name\n" +
                       "       -h     help\n" +
                       "       -host  host the ET system resides on (defaults to local)\n" +
	                   "       -p     TCP port number for a direct connection\n" +
	                   "       -u     multicast udp port\n\n");
  }

  
  public static void main(String[] args) {
      String etName = null, host = null;
      int port  = EtConstants.serverPort;
      int mPort = EtConstants.multicastPort;
      boolean setHost = false, setMcastPort = false, doMcast = false;

      try {
          for (int i = 0; i < args.length; i++) {
              if (args[i].equalsIgnoreCase("-f")) {
                  etName = args[++i];
              }
              else if (args[i].equalsIgnoreCase("-host")) {
                  host = args[++i];
                  setHost = true;
              }
              else if (args[i].equalsIgnoreCase("-p")) {
                  try {
                      port = Integer.parseInt(args[++i]);
                      if ((port < 1024) || (port > 65535)) {
                          System.out.println("Port number must be between 1024 and 65535.");
                          usage();
                          return;
                      }
                  }
                  catch (NumberFormatException ex) {
                      System.out.println("Did not specify a proper port number.");
                      usage();
                      return;
                  }
              }
              else if (args[i].equalsIgnoreCase("-u")) {
                  try {
                      mPort = Integer.parseInt(args[++i]);
                      setMcastPort = true;
                      if ((mPort < 1024) || (mPort > 65535)) {
                          System.out.println("Port number must be between 1024 and 65535.");
                          usage();
                          return;
                      }
                  }
                  catch (NumberFormatException ex) {
                      System.out.println("Did not specify a proper port number.");
                      usage();
                      return;
                  }
              }
              else {
                  usage();
                  return;
              }
          }

          // If direct connecting, check the host's name, look only locally by default
          if (!doMcast && host == null) {
              try {
                  host = InetAddress.getLocalHost().getHostName();
              }
              catch (UnknownHostException ex) {
                  System.out.println("Host not specified and cannot find local host name.");
                  usage();
                  return;
              }
          }

          if (etName == null) {
              usage();
              return;
          }

          // Try to figure out if we're multicasting or direct connecting.
          // If no host is given AND udp port is given, try multicasting.
          // Otherwise, assume a direct connection. */
          if (!setHost && setMcastPort) {
              doMcast = true;
              System.out.println("\nUse multicasting to find ET system\n");
          }

          EtSystemOpenConfig config;
          if (doMcast) {
              // Use multicasting to connect to ET system
              ArrayList<String> mList = new ArrayList<String>();
              mList.add(EtConstants.multicastAddr);
              config = new EtSystemOpenConfig(etName, EtConstants.hostAnywhere,
                                              mList, mPort, 32);
          }
          else {
              // Make a direct connection to ET system's tcp server
              config = new EtSystemOpenConfig(etName, host, port);
          }

          // Create ET system object with debugging output
          EtSystem sys;
          AllData etData = new AllData();

          long t2, t1 = System.currentTimeMillis();

          while (true) {
              try {
                  sys = new EtSystem(config, EtConstants.debugError);
                  sys.open();
                  //etData = sys.getData();
                  sys.close();
              }
              catch (EtException ex) {
                  ex.printStackTrace();
                  System.out.print("\n*****************************************\n");
                  System.out.print("*   Error opening/closing ET system   *");
                  System.out.print("\n*****************************************\n");
              }
              Thread.sleep(125);

              t2 = System.currentTimeMillis();
              if ( (t2 - t1) > 4000) {
                  t1 = t2;
                  System.out.println("Still working");
              }

          }


      }
      catch (IOException ex) {
          System.out.println("Communication error with ET system:");
          ex.printStackTrace();
      }
      catch (Exception ex) {
          System.out.println("ERROR:");
          ex.printStackTrace();
      }

  }


}
