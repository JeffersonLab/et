#
# ET src unix makefile
#

AR          = ar
RANLIB      = ranlib

LIBNAM      = libet
LIB_STATIC  = $(LIBNAM).a
LIB_DYNAMIC = $(LIBNAM).so
LIB_REMOTE  = $(LIBNAM)_remote.so

# for all POSIX systems _REENTRANT makes libc functions reentrant
AC_FLAGS = -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS

# Linux
ifeq ($(OSNAME),Linux)
CC = gcc
CFLAGS   = -O3 -fPIC -I. -I$(INC_DIR) $(AC_FLAGS)
LIBS     = -lieee -lrt -lpthread -lm -lnsl -lresolv -ldl
SHLIB_LD = gcc -shared

# if 32 bit
ifneq ($(ET_BIT_ARCH), 64)
CFLAGS   = -m32 -O3 -fpic -I. -I$(INC_DIR) $(AC_FLAGS)
SHLIB_LD = gcc -m32 -shared
endif

endif

# Solaris
ifeq ($(OSNAME),SunOS)

CC   = cc
LIBS = -lm -lposix4 -lpthread -lsocket -lnsl -lresolv -ldl

# if 64 bit
ifeq ($(ET_BIT_ARCH), 64)

# no static linking on 64 bit solaris
LIB_STATIC =

# if SPARC processor
ifeq ($(PLATFORM), sun4u)
CFLAGS   = -mt -xO5 -xarch=native64 -xcode=pic32 -I. -I$(INC_DIR) $(AC_FLAGS)
SHLIB_LD = ld -G -L /lib/64
# else if AMD processor
else
# put -fast flag to left of -xarch=amd64 !!!
CFLAGS   = -mt -xO5 -xarch=amd64 -KPIC -I. -I$(INC_DIR) $(AC_FLAGS)
# for some reason we must handle ucb lib explicitly
SHLIB_LD = ld -G -L /lib/64 -L /usr/ucblib/amd64
endif

# else if 32 bit
else
CFLAGS   = -mt -xO5 -KPIC -I. -I$(INC_DIR) $(AC_FLAGS)
SHLIB_LD = ld -G
endif

endif

# MAC OS
ifeq ($(OSNAME),Darwin)
CFLAGS   = -O3 -fPIC -I. -I$(INC_DIR) $(AC_FLAGS) 
SHLIB_LD = ld -dylib /usr/lib/dylib1.o -lpthread -ldl
LIBS     = -ldl
endif

ET_LIBS = $(LIB_DYNAMIC) $(LIB_STATIC) $(LIB_REMOTE)

SRC  =  et_attachment.c \
	et_station.c \
	et_statconfig.c \
	et_readwrite.c \
	et_mem.c \
	et_openconfig.c \
	et_init.c \
	et_local.c \
	et_common.c \
	et_event.c \
	et_sysconfig.c \
	et_remote.c \
	et_network.c \
	et_system.c \
	et_noshare.c \
	et_server.c \
	et_bridge.c \
	et_data.c

OBJS =  et_attachment.o \
	et_station.o \
	et_statconfig.o \
	et_readwrite.o \
	et_mem.o \
	et_openconfig.o \
	et_init.o \
	et_local.o \
	et_common.o \
	et_event.o \
	et_sysconfig.o \
	et_remote.o \
	et_network.o \
	et_system.o \
	et_noshare.o \
	et_server.o \
	et_bridge.o \
	et_data.o

# These objects are used to make the lib for remote ET clients
# that don't need system or local stuff.

REMOTE_SRC = \
	et_statconfig.c \
	et_openconfig.c \
	et_init.c \
	et_sysconfig.c \
	et_remote.c \
	et_network.c \
	et_remoteclient.c

REMOTE_OBJS = \
	et_statconfig.o \
	et_openconfig.o \
	et_init.o \
	et_sysconfig.o \
	et_remote.o \
	et_network.o \
	et_remoteclient.o

HFILES = et.h et_private.h et_network.h et_data.h

PROGS = et_monitor

all: copyFiles $(ET_LIBS) $(PROGS) saveFiles

copyFiles:
	-rm -f *.o *.so *.a $(PROGS)
	-cp -p ./.$(OSNAME)/$(PLATFORM)/$(ET_BIT_ARCH)/* .;

saveFiles:
	-cp -p *.o $(PROGS) $(ET_LIBS) ./.$(OSNAME)/$(PLATFORM)/$(ET_BIT_ARCH)/.;
	-rm -f *.o

install: all install-lib install-inc install-bin

install-lib: $(ET_LIBS)
	@echo "Installing ET libraries in $(LIB_DIR)"
	@for i in $(ET_LIBS); do \
	   echo "  installing $$i"; \
	   cp $$i $(LIB_DIR)/$$i; \
           done;

install-inc: $(HFILES)
	@echo "Installing includes in $(INC_DIR)"
	@for i in $(HFILES); do \
	   echo "  installing $$i"; \
	   cp $$i $(INC_DIR)/$$i; \
           done;

install-bin: $(PROGS)
	@echo "Installing executables in $(BIN_DIR)"
	@for i in $(PROGS); do \
	   echo "  installing $$i"; \
	   cp $$i $(BIN_DIR)/$$i; \
           done;

# libraries
$(LIB_STATIC): $(OBJS)
	$(AR) cr $@ $?
	$(RANLIB) $@

$(LIB_DYNAMIC): $(OBJS)
	$(SHLIB_LD) $(OBJS) -o $@

$(LIB_REMOTE): $(REMOTE_OBJS)
	$(SHLIB_LD) $(REMOTE_OBJS) -o $@

# file dependencies
$(OBJS) : et.h et_private.h et_network.h $(SRC)
et_remoteclient.o : et.h et_private.h et_network.h $(REMOTE_SRC)
et_data.o et_server.o : et_data.h et.h et_private.h et_network.h et_data.c et_server.c

et_monitor : et_monitor.c et.h et_private.h et_data.h
	$(CC) -o $@ $(CFLAGS) $< -L./ -L/lib64/tls -L/usr/ucblib/amd64 -let $(LIBS)

clean: 
	-rm -f core *~ *.o *.so *.a $(PROGS)
	-rm -f ./.$(OSNAME)/$(PLATFORM)/$(ET_BIT_ARCH)/*

.c:
	$(CC) -o $* $(CFLAGS) $< -L./ -L$(LIB_DIR) -L/lib64/tls -L/usr/ucblib/amd64 -let $(LIBS)
.c.o:
	$(CC) -c $(CFLAGS) $<
